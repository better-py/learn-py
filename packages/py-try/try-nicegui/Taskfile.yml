version: "3"

#
# global vars: https://taskfile.dev/#/usage?id=variables
#
vars:
  VAR1: "some-var"

# global env:
env:
  ENV1: testing

################################################################################################

tasks:
  run:
    aliases: [ 'r' ]
    cmds:
      - python3 src/try_nicegui/run05_tpl_spa.py

  pack:
    cmds:
      - rm -rf dist/
      - poetry run python build3.py
    ignore_error: true

  pack2:
    aliases: [ 'p2' ]
    cmds:
      - rm -rf /tmp/dist/
#      - poetry run python -m nuitka  --onefile src/try_nicegui/run07_spa.py --static-libpython=no
      - poetry run python -m nuitka  --onefile src/try_nicegui/run07_spa.py --macos-create-app-bundle --static-libpython=no

  i:
    cmds:
      - env PYTHON_CONFIGURE_OPTS="--enable-shared"; pyenv install 3.10.9

  run7:
    aliases: [ 'r7' ]
    cmds:
      - python3 src/try_nicegui/run07_spa.py

  run2:
    aliases: [ 'r2' ]
    cmds:
      - python src/try_nicegui/run02_tpl.py --mode=native

  run6:
    aliases: [ 'r6' ]
    cmds:
      - python3 src/try_nicegui/run06_tpl_spa.py

  run5:
    aliases: [ 'r5' ]
    cmds:
      - python3 src/try_nicegui/run05_tpl.py

  run4:
    aliases: [ 'r4' ]
    cmds:
      - python3 src/try_nicegui/run04_tpl.py

  run3:
    cmds:
      - python3 src/try_nicegui/run03_exe.py

  run:tray:
    cmds:
      - |
        python src/try_nicegui/run01_tray.py

  run:exe:
    cmds:
      - ./dist/myapp

  clean:
    aliases: [ 'c' ]
    cmds:
      - rm -rf dist/
      - rm -rf dist/
    #      - rm -rf build/
    #      - rm -rf .venv/
    #      - poetry env remove --all
    ignore_error: true

  rel3:
    cmds:
      #      - poetry run python build2.py bdist_msi  # build Windows installer
      - poetry run python build2.py bdist_dmg # build macos installer
      - open ./build
      - open ./dist
    ignore_error: true

  rel2:
    cmds:
      - |
        poetry run cxfreeze -c src/try_nicegui/run05_tpl.py \
            --target-name myapp \
            --target-dir dist
      - open ./dist

  release:
    cmds:
      #      - poetry run pyinstaller -F -w -i ./public/images/logo.ico \
      #        src/try_nicegui/run02_tpl.py \
      #        --name myapp
      #      - cp poetry.toml poetry.bak.toml
      #      - cp poetry.rel.toml poetry.toml
      - poetry install --directory=.
      - poetry run python build.py
      #      - cp poetry.bak.toml poetry.toml
      - open ./dist

  ################################################################################################

  debug:
    cmds:
      #      - poetry shell -vvv
      - poetry debug info
      - poetry env list

  env:fix:
    cmds:
      #      - rm -rf ~/Library/Caches/pypoetry  # 也不要乱删此路径
      - poetry env list
      - poetry env remove --all
      - poetry config virtualenvs.path --unset  # 不要改此参数

  env:init:
    cmds:
      - pyenv which python3
      - poetry env use $(pyenv which python3)
      - task: debug
      #      - poetry env use $(pyenv which python3)
      #      - poetry env use /Users/dev/.pyenv/versions/py310-exe/bin/python3
    #      - poetry env use 3.10
    ignore_error: true

  env:cfg:
    cmds:
      - poetry config virtualenvs.in-project false
      - poetry config virtualenvs.create false
      - poetry config virtualenvs.prefer-active-python true
      - poetry config virtualenvs.path .venv
      - poetry config --list

  install:
    cmds:
      #      - poetry config virtualenvs.in-project true
      #      - poetry config virtualenvs.create true
      #      - poetry config virtualenvs.prefer-active-python true
      #      - poetry config virtualenvs.path .venv
      - poetry install -vvv
    #      - poetry run pip3 uninstall numpy
    #      - poetry run pip3 install numpy
    ignore_error: true


  poetry:
    aliases: [ 'p' ]
    cmds:
      - poetry
      - poetry {{.CLI_ARGS}}

  add:
    aliases: [ 'a' ]
    cmds:
      - poetry add {{.CLI_ARGS}}

  add:list:
    cmds:
      #- poetry remove nicegui
      - |
        poetry add "typer[all]" \
          nicegui pystray \
          loguru Pillow pywebview
      - |
        poetry run \
          pip3 install numpy # fix for m1 mac

  add:dev:
    cmds:
      - |
        poetry add --dev \
          black pytest \
          pyinstaller \
          cx_Freeze

  update:
    aliases: [ 'u' ]
    cmds:
      - poetry update {{.CLI_ARGS}}

  config:
    cmds:
      - poetry config virtualenvs.in-project false --local
      - poetry config virtualenvs.create false --local

  env:
    cmds:
      - poetry
      - poetry env list
      - poetry cache list
      - poetry debug info
      - poetry debug resolve
